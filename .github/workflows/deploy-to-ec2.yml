name: Deploy to EC2

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ubuntu
        run: |
          # Setup SSH
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment..."
          cd /home/ubuntu/The-Power100-Experience
          
          # Check for uncommitted changes
          if [[ -n $(git status --porcelain) ]]; then
            echo "⚠️  Uncommitted changes detected, stashing..."
            git stash
          fi
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git pull origin master
          
          # Backend setup
          echo "🔧 Setting up backend..."
          cd /home/ubuntu/The-Power100-Experience
          
          # Only clean install if package.json changed or node_modules is corrupted
          if [ ! -d "node_modules/express" ] || [ ! -d "node_modules/pg" ]; then
            echo "🧹 Dependencies missing, reinstalling..."
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
            
            # Ensure critical backend dependencies are installed at root
            npm install express pg jsonwebtoken bcryptjs cors dotenv express-rate-limit --save --legacy-peer-deps
          else
            echo "✅ Dependencies already installed"
          fi
          
          # Create symlink for backend to find node_modules
          cd tpe-backend
          # Remove any existing node_modules (file, directory, or symlink)
          rm -rf node_modules
          # Create symlink to parent node_modules
          ln -sf ../node_modules node_modules
          
          # Verify Express is available
          if [ ! -d "node_modules/express" ]; then
            echo "❌ ERROR: Express not found after install!"
            exit 1
          fi
          echo "✅ Backend dependencies verified"
          
          # Ensure dependencies are properly set up
          echo "🔧 Ensuring backend dependencies..."
          cd /home/ubuntu/The-Power100-Experience/tpe-backend
          chmod +x ensure-dependencies.sh
          ./ensure-dependencies.sh || exit 1
          
          # Run health check AFTER dependencies are verified
          echo "🏥 Running health check..."
          node health-check.js || exit 1
          
          # Frontend setup and build
          echo "🎨 Building frontend..."
          cd ../tpe-front-end
          npm ci
          npm run build
          
          # Restart services using ecosystem file
          echo "♻️  Restarting services..."
          cd /home/ubuntu/The-Power100-Experience
          pm2 reload ecosystem.config.js --update-env
          
          # Verify services are running
          echo "🔍 Verifying services..."
          sleep 10  # Give services time to start
          
          # Check backend status
          if ! pm2 show tpe-backend | grep -q "status.*online"; then
            echo "❌ Backend failed to start"
            pm2 logs tpe-backend --lines 20 --nostream
            exit 1
          fi
          
          # Check frontend status
          if ! pm2 show tpe-frontend | grep -q "status.*online"; then
            echo "⚠️ Frontend not running, attempting restart..."
            pm2 delete tpe-frontend || true
            cd /home/ubuntu/The-Power100-Experience/tpe-front-end
            pm2 start npm --name "tpe-frontend" -- start
            sleep 5
          fi
          
          # Check service status
          pm2 list
          
          echo "✅ Deployment complete!"
          EOF
          
          # Copy and execute deployment script on EC2
          scp -o StrictHostKeyChecking=no -i private_key deploy.sh ${USER}@${HOST}:/tmp/
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} 'bash /tmp/deploy.sh'
          
          # Cleanup
          rm -f private_key deploy.sh
          
      - name: Health Check
        env:
          HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "🏥 Running health checks..."
          sleep 10
          
          # Check if site is responding (using HTTP since we're checking via IP)
          # Production frontend runs on port 3000 (not 3002 which is for local dev)
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${HOST}:3000/)
          if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
            echo "✅ Site is up and running! (Status: $response)"
          else
            echo "⚠️  Site returned status code: $response"
            echo "Note: Deployment was still successful"
            exit 0  # Don't fail the workflow
          fi
// src/app/contractor-flow/page.tsx

"use client";

import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ContractorFlowProvider, useContractorFlow } from "@/contexts/ContractorFlowContext";
import SessionService from "@/lib/sessionService";
import SessionDetectionModal from "@/components/ui/session-detection-modal";
import { useRouter } from "next/navigation";

// FIXED: Use correct alias paths for all component imports
import VerificationStep from "@/components/contractor-flow/verificationstep";
import FocusSelectionStep from "@/components/contractor-flow/focusselectionstep";
import ProfilingStep from "@/components/contractor-flow/profilingstep";
import TechStackStep from "@/components/contractor-flow/techstackstep";
import MatchingStep from "@/components/contractor-flow/matchingstep";
import CompletionStep from "@/components/contractor-flow/completionstep";

function ContractorFlowContent() {
  const { state, dispatch } = useContractorFlow();
  const { currentStep, contractor, isLoading, error } = state;
  const router = useRouter();
  const [showSessionModal, setShowSessionModal] = useState(false);
  const [savedSession, setSavedSession] = useState<any>(null);
  const [isCheckingSession, setIsCheckingSession] = useState(true);

  const steps = [
    { number: 1, title: "Verification", component: VerificationStep },
    { number: 2, title: "Focus Areas", component: FocusSelectionStep },
    { number: 3, title: "Business Profile", component: ProfilingStep },
    { number: 4, title: "Technology Stack", component: TechStackStep },
    { number: 5, title: "Partner Match", component: MatchingStep },
    { number: 6, title: "Complete", component: CompletionStep }
  ];

  // Check for existing session on mount
  useEffect(() => {
    const checkExistingSession = async () => {
      try {
        const session = SessionService.getSession();
        if (session && session.contractor && session.currentStep) {
          setSavedSession(session);
          setShowSessionModal(true);
        }
      } catch (error) {
        console.error("Error checking session:", error);
      } finally {
        setIsCheckingSession(false);
      }
    };

    checkExistingSession();
  }, []);

  // Save session whenever contractor data or step changes
  useEffect(() => {
    if (contractor?.id && currentStep > 0) {
      try {
        const session = SessionService.getSession();
        const token = session?.token || `session_${Date.now()}`;
        SessionService.saveSession(token, contractor, currentStep);
      } catch (error) {
        console.error("Error saving session:", error);
      }
    }
  }, [contractor, currentStep]);

  const handleResumeSession = async () => {
    try {
      if (savedSession) {
        // Restore contractor data and step
        dispatch({ type: 'SET_CONTRACTOR', payload: savedSession.contractor });
        dispatch({ type: 'SET_STEP', payload: savedSession.currentStep });
        setShowSessionModal(false);
      }
    } catch (error) {
      console.error("Error resuming session:", error);
      setShowSessionModal(false);
    }
  };

  const handleStartFresh = () => {
    SessionService.clearSession();
    dispatch({ type: 'RESET' });
    setShowSessionModal(false);
  };

  const handleCloseModal = () => {
    setShowSessionModal(false);
  };

  const nextStep = () => {
    if (currentStep < steps.length) {
      dispatch({ type: 'SET_STEP', payload: currentStep + 1 });
      // Update session with new step
      SessionService.updateSessionStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) {
      dispatch({ type: 'SET_STEP', payload: currentStep - 1 });
      // Update session with new step
      SessionService.updateSessionStep(currentStep - 1);
    }
  };

  const CurrentStepComponent = steps[currentStep - 1]?.component;

  // Show session detection modal if there's a saved session
  if (isCheckingSession) {
    return (
      <div className="min-h-screen bg-power100-bg-grey flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-power100-red"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-power100-bg-grey">
      {/* Session Detection Modal */}
      <SessionDetectionModal
        isOpen={showSessionModal}
        onClose={handleCloseModal}
        onResume={handleResumeSession}
        onStartFresh={handleStartFresh}
        contractor={savedSession?.contractor}
        currentStep={savedSession?.currentStep}
      />

      {/* Progress Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-6 py-8">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold text-power100-black">
              The Power100 Experience
            </h1>
            <div className="text-sm text-power100-grey">
              Step {currentStep} of {steps.length}
            </div>
          </div>

          {/* Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
            <motion.div
              className="bg-power100-red h-2 rounded-full"
              initial={{ width: "0%" }}
              animate={{ width: `${(currentStep / steps.length) * 100}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>

          {/* Step Indicators */}
          <div className="flex justify-between">
            {steps.map((step) => (
              <div key={step.number} className="flex flex-col items-center">
                <motion.div
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                    currentStep > step.number
                      ? "bg-power100-green text-white"
                      : currentStep === step.number
                      ? "bg-power100-red text-white"
                      : "bg-gray-300 text-gray-600"
                  }`}
                  initial={{ scale: 0.8 }}
                  animate={{ scale: currentStep === step.number ? 1.1 : 1 }}
                  transition={{ duration: 0.3 }}
                >
                  {currentStep > step.number ? "âœ“" : step.number}
                </motion.div>
                <span className="text-xs mt-2 text-center max-w-20">
                  {step.title}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Step Content */}
      <div className="max-w-4xl mx-auto px-6 py-12">
        {/* Loading State */}
        {isLoading && (
          <div className="flex justify-center items-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-power100-red"></div>
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
            {error}
          </div>
        )}

        {/* Step Component */}
        {!isLoading && !error && CurrentStepComponent && (
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
            >
              <CurrentStepComponent
                data={contractor}
                onNext={nextStep}
                onPrev={prevStep}
                onUpdate={(data) => {
                  dispatch({ type: 'UPDATE_CONTRACTOR', payload: data });
                  // Update session with new contractor data
                  SessionService.updateSessionContractor(data);
                }}
              />
            </motion.div>
          </AnimatePresence>
        )}
      </div>
    </div>
  );
}

export default function ContractorFlowPage() {
  return (
    <ContractorFlowProvider>
      <ContractorFlowContent />
    </ContractorFlowProvider>
  );
}
